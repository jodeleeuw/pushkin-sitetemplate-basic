"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _express = _interopRequireDefault(require("express"));

var _amqplib = _interopRequireDefault(require("amqplib"));

var _uuid = require("uuid");

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _cors = _interopRequireDefault(require("cors"));

var _cookieSession = _interopRequireDefault(require("cookie-session"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PushkinAPI = /*#__PURE__*/function () {
  function PushkinAPI(expressPort, amqpAddress) {
    _classCallCheck(this, PushkinAPI);

    this.expressPort = expressPort;
    this.amqpAddress = amqpAddress;
    this.initialized = false;
    this.app = (0, _express["default"])();
    this.app.set('trust-proxy', 1);
    this.app.use((0, _cookieSession["default"])({
      name: 'session',
      maxAge: 24 * 60 * 60 * 1000,
      keys: ['oursupersecrectkeyforpreventingcookietampering']
    }));
    this.app.use(function (req, res, next) {
      req.session.id = req.session.id || (0, _uuid.v4)();
      console.log("API got request for ".concat(req));
      next();
    });
    this.app.use(_bodyParser["default"].json());
    this.app.use((0, _cors["default"])());
    this.expressListening = false;
    this.app.get('/', function (req, res) {
      res.send('👨‍🔬💬👩‍🔬');
    });
  }

  _createClass(PushkinAPI, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  _amqplib["default"].connect(_this.amqpAddress).then(function (conn) {
                    _this.conn = conn;
                    _this.initialized = true;
                    console.log('API init connected');
                    resolve();
                  })["catch"](function (err) {
                    reject("Error connecting to message queue: ".concat(err));
                  });
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "useController",
    value: function useController(route, controller) {
      if (this.expressListening) throw new Error('Unable to add controllers after the API has started.');
      console.log('API using controller');
      this.app.use(route, controller);
    }
  }, {
    key: "usePushkinController",
    value: function usePushkinController(route, pushkinController) {
      if (this.expressListening) throw new Error('Unable to add controllers after the API has started.');
      if (!this.initialized) throw new Error('The API must first be initialized by calling .init().');
      this.useController(route, pushkinController.getConnFunction()(this.conn));
    } //enableCoreRoutes() { this.usePushkinController('/api', coreRouter); }

  }, {
    key: "start",
    value: function start() {
      var _this2 = this;

      if (!this.initialized) throw new Error('The API hasn\'t been successfully initialized');
      this.expressListening = true;
      this.app.listen(this.expressPort, function () {
        console.log("Pushkin API listening on port ".concat(_this2.expressPort));
      });
    }
  }]);

  return PushkinAPI;
}();

exports["default"] = PushkinAPI;